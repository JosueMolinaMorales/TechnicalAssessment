Josue Molina Morales Dev Log Updates:

Assigned the technical assessment
Looked over root README.md
Downloaded all required materials (Node.js, Angular, Postman)
  
8 total task, complete minimum of 4 tasks

Backend: Using NodeJS and Express
  November 3rd 2021:
    Since I am not too familiar Javascript, I will spend some time understanding the language.
    
    Read the README.md
    "Create the Quests module for this application." 
    What are routes? Googled "What are routes in web development?"
      "Routing or router in web development is a mechanism where HTTP requests are routed to the code that handles them.
      In the Router you determine what should heppen when a user visits a certain page" - Divpusher
      Route::get('/test', function(){
          return "Hello World";
      });
      When someone opens the website /test/ subpage, it will display a Hello World text.
     
     I Googled "What are POST request?" and got a link to w3schools about HTTP Methods
      GET -> used to request data from a specified resource
      POST -> used to send data to a server to create/update a resource
      
    From Expressjs api:
      express.Router([options]) -> creates a new router object
      A router object is an instance of middleware and routes.
      
      Application
        The App object denotes the express application. 
        The app object has methods for:
          Routing HTTP requests
          Configuring middleware
          rendering HTML views
      
    What does this mean?
    app.get('/', (req, res) => {
        res.send('Welcome to the Backend API!');
    });
    From looking at expressjs.com app.METHOD(PATH, HANDLER)
    METHOD -> HTTPS request method
    HANDLER -> function executed when the route is matched
    app -> instance of express
    so get is our method, the current path is the homepage, and the handler just responds with "Welcome to Backend API!" on the homepage
    
    Routes provided: 
      Get all herores
        GET http://localhost:3000/heroes
        HTPP Status Code: 200
        Response Body: An Array of heroes
        
    Added Quest.js which is a class for quest objects that will be stored in QuestDB.js
    Coded out QuestDB.js with help from HeroDB.js
    
  November 4th 2021
      Got a better understanding of what the tasks were asking me to do. 
      Task 1 -> Getting quests for a hero. Will be given a heros ID and you need to return an array of all the heros quests, misunderstood that yesterday.
        I redid a method getHeroQuest() to getHeroQuests() and looped through the quest array and if a quest hero id match the id given, store in array that 
        will be returned
        Not sure how i would test this. 
        3pm update: hardcoded a hero object into the heroDB and a quest object into the questDB and made sure that when a request was made with a hero id 
        e.g. /heroes/123/quest will return an array of quests for the hero id 123. I ran into an issue where I requested hero that did not exists, I would 
        get an empty array back and not a 404 error not found.
        I figured out that since getQuests() returns an empty array if no quests are found, 
        if(!quests) was always going to be false since quests would never be undefined so i changed the if to if(quests.length == 0) to say if there are 
        no quests then 404 not found. This worked but did not handle the case where a given heroId was valid but had no quests, it would return 404 not found, 
        when it should return an empty array.
        To fix this i changed the if statement to if(!HeroesDB.getInstance().getHero(heroId)).

      At the end of task 1 I started using postman to help me test all the routers

      Task 2 -> Creating a quest -> 201 Quest was added -> 404 Hero was not found for given ID
      To Start this, i first got familiar with how to POST something in postman. and tested out the hero router by creating a couple of heros.
      Coded out router.post() to create a quest. Didn't have too many issues.
      
      Task 3 -> Update a quest -> 204 if quest was updated -> 400 route hero id does not match the quest heroid in the database 
        -> 404 hero or quest was not found for given ids
        For this task i know that i am going to need two ids. One for the hero and one for the quest. 
        First I will check to see if the given Ids exists in the heroDB and the questDB if not then send 404
        Every quest has a hero id attribute so if the heroid does not match the given quest id's heroid then send 400.
        else update the quest
      
      Task 4 -> Delete a quest -> 204 quest was deleted in the database -> 400 route hero id does not match the quest heroid in the database 
        -> 404 hero or quest was not found for given ids
        For this task , it seems like i will be check the same conditions as the previous task.
        
      Finished all 4 backend tasks!
  
Frontend:
  November 4th
    To Understand this part, I will spend some time reading Angular docs.
    *ngFor repeats for each product in the list
    {{ hero.name }} statement is an example of Angular's interpolation syntax. Interpolation {{ }} lets you render the property value as text
    To make each hero name a link to hero details, add the <a> element around {{ hero.name }}
  
  November 7th
    I have spent the last two days researching angular, reading about how routing works with the link that was provided.
    After doing some reading on routes, i have a basic understanding that if i want to create another page i need to add it to a path in the route module.
    the current router is -> path: '', component: HeroesListComponent I added 'list' instead of list and saw that if i typed localhost:4200/list the list was moved to 
    this page.
    I was able to have each hero name to be an event, so that one you click on them they will open another page. 
    The part I am currently stuck on is having a page for each hero listed. I created a Hero-Details component to help me with this.
    Not sure how I would get a Hero id to this Hero-Details component so that i can call a function i created in backend.service.ts which will get the information of 
    a hero from the id. (i think)
  
